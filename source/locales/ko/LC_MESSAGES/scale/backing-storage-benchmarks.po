# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2025 Mattermost
# This file is distributed under the same license as the Mattermost package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mattermost \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 21:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/scale/backing-storage-benchmarks.rst:2
msgid "Backing storage benchmarks"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:4
msgid ""
"Understanding the performance characteristics of your backing storage is "
"critical for optimizing your Mattermost deployment. These benchmarks "
"offer insights into the relative performance of each storage option, "
"helping you make informed decisions based on your use case and "
"infrastructure needs."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:6
msgid ""
"This page provides detailed write and read benchmark results for "
"supported storage options including `local file system (EBS, gp3) "
"<#local>`__, `network file system (EFS) <#efs>`__, and `object storage "
"(S3) <#s3>`__."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:9
msgid "Write operations"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:12
#: ../../source/scale/backing-storage-benchmarks.rst:41
msgid "File Size"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:12
#: ../../source/scale/backing-storage-benchmarks.rst:41
msgid "Local (EBS)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:12
#: ../../source/scale/backing-storage-benchmarks.rst:41
#: ../../source/scale/backing-storage-benchmarks.rst:88
msgid "EFS"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:12
#: ../../source/scale/backing-storage-benchmarks.rst:41
#: ../../source/scale/backing-storage-benchmarks.rst:93
msgid "S3"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:14
#: ../../source/scale/backing-storage-benchmarks.rst:43
msgid "100KB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:14
msgid "0.57 ms (±0.26 ms, p50: 0.63 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:14
msgid "34.47 ms (±6.33 ms, p50: 32.57 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:14
msgid "181.59 ms (±39.05 ms, p50: 174.83 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:17
#: ../../source/scale/backing-storage-benchmarks.rst:46
msgid "1MB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:17
msgid "2.08 ms (±0.92 ms, p50: 2.28 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:17
msgid "57.43 ms (±7.32 ms, p50: 58.16 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:17
msgid "277.13 ms (±49.95 ms, p50: 279.36 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:20
#: ../../source/scale/backing-storage-benchmarks.rst:49
msgid "10MB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:20
msgid "18.15 ms (±5.31 ms, p50: 18.23 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:20
msgid "180.58 ms (±97.95 ms, p50: 150.35 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:20
msgid "469.29 ms (±166.32 ms, p50: 462.12 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:23
#: ../../source/scale/backing-storage-benchmarks.rst:52
msgid "100MB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:23
msgid "585.14 ms (±274.38 ms, p50: 795.78 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:23
msgid "390.87 ms (±166.32 ms, p50: 339.20 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:23
msgid "1.09 s (±0.04 s, p50: 1.09 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:26
#: ../../source/scale/backing-storage-benchmarks.rst:55
msgid "1GB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:26
msgid "7.42 s (±2.13 s, p50: 7.99 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:26
msgid "3.05 s (±1.09 s, p50: 2.93 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:26
msgid "10.65 s (±0.82 s, p50: 10.44 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:29
#: ../../source/scale/backing-storage-benchmarks.rst:58
msgid "10GB"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:29
msgid "70.66 s (±7.05 s, p50: 80.50 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:29
msgid "26.54 s (±2.47 s, p50: 26.86 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:29
msgid "109.05 s (±12.47 s, p50: 105.13 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:35
msgid ""
"**Write Performance**: Local EBS storage is fastest for small files "
"(100KB - 10MB), while EFS performs better for larger files (100MB - "
"10GB). S3 is consistently the slowest for writes across all file sizes."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:38
msgid "Read operations"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:43
msgid "0.05 ms (±0.02 ms, p50: 0.04 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:43
msgid "0.66 ms (±0.17 ms, p50: 0.60 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:43
msgid "28.55 ms (±4.12 ms, p50: 27.63 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:46
msgid "0.18 ms (±0.06 ms, p50: 0.18 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:46
msgid "0.82 ms (±0.19 ms, p50: 0.72 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:46
msgid "27.03 ms (±4.28 ms, p50: 27.54 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:49
msgid "1.27 ms (±0.27 ms, p50: 1.16 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:49
msgid "7.83 ms (±18.12 ms, p50: 1.68 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:49
msgid "108.24 ms (±0.56 ms, p50: 108.18 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:52
msgid "16.50 ms (±0.95 ms, p50: 16.16 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:52
msgid "73.53 ms (±182.32 ms, p50: 16.91 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:52
msgid "1.05 s (±0.00 s, p50: 1.05 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:55
msgid "167.89 ms (±2.19 ms, p50: 167.72 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:55
msgid "773.41 ms (±1768.89 ms p50: 168.17 ms)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:55
msgid "10.49 s (±0.02 s, p50: 10.49 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:58
msgid "1.57 s (±0.03 s, p50: 1.56 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:58
msgid "1.56 s (±0.02 s, p50: 1.55 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:58
msgid "150.66 s (±33.47 s, p50: 146.51 s)"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:64
msgid ""
"**Read Performance**: Local and EFS have comparable read performance for "
"very large files (10GB), but local storage outperforms for smaller files."
" S3 read performance is significantly slower, especially for large files "
"(150.66s versus ~1.56s for 10GB files)."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:65
msgid ""
"**Consistency**: Local storage shows the most consistent performance "
"(lower standard deviations) for small files, while EFS shows more "
"consistent performance for large files. S3 generally has higher "
"variability across all metrics."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:66
msgid ""
"**Median vs Average**: The median (p50) values generally align with the "
"averages, but in some cases (particularly EFS read operations), the "
"median reveals that outliers significantly affect the average. For "
"example, EFS read performance for 100MB and 1GB files shows much better "
"median values than averages."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:-1
msgid "Read and Write Performance"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:72
msgid "Testing notes"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:74
msgid ""
"For S3 tests, :ref:`Amazon S3 exported upload part size <configure"
"/environment-configuration-settings:amazon s3 upload part size>` was set "
"to the default value (100MB)."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:75
msgid "Local EBS storage is the stock gp3 (3000 IOPS) provided by EC2 instances."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:76
msgid ""
"Both EBS and EFS solutions tested are considered ``local`` storage "
"options from the application's perspective, where the :ref:`file storage "
"system <configure/environment-configuration-settings:file storage "
"system>` is set to ``local`` in both cases. EFS is essentially AWS's "
"managed NFS, which enables it to serve as a potential alternative to S3 "
"by allowing multiple Mattermost nodes in a high-availability (HA) "
"deployment to share a common file system. In such HA scenarios, the "
"standard local file storage (e.g., an EBS volume attached to a single "
"instance) :ref:`is not suitable, as it can't be shared across multiple "
"nodes <scale/high-availability-cluster-based-deployment:file storage "
"configuration>`. EFS is a good alternative in this case, but EFS is not a"
" block storage solution like EBS."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:80
msgid "Supported storage options"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:83
msgid "Local"
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:85
msgid ""
"The local file system of the Mattermost server. If running in a cloud "
"environment like AWS, this often utilizes Elastic Block Storage (EBS), "
"which provides block-level storage attached directly to the instances. "
"This setup typically offers high performance with low latency since the "
"storage is local to the server. This option is often the fastest for "
"small files due to low latency."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:90
msgid ""
"Amazon Elastic File System, a managed file storage solution that supports"
" shared access across multiple instances. EFS supports shared access "
"across multiple instances but adds network overhead, which can impact "
"performance compared to local storage options. EFS is generally slower "
"than local storage but can be beneficial for certain use cases requiring "
"shared access."
msgstr ""

#: ../../source/scale/backing-storage-benchmarks.rst:95
msgid ""
"Amazon Simple Storage Service, an object storage solution that provides "
"high durability and scalability. While S3 is great for storing large "
"amounts of data reliably, it introduces higher latency and slower "
"performance due to network-based access and its nature as object storage "
"rather than block or file storage."
msgstr ""

